server.publishAllSubscribed = (message) ~
  for channel in tags(conn)
    for connection in conns(channel)
      connection.onMsg(message)
dictionary = {key1 : 1, key2 : 2}
log(dictionary.key2)
if dictionary.key2 == 3
  if dictionary.key + 1 == 4
    x = 1
    while x < 10
      x = x + 2
else
  dictionary.key = 4
x = 3
y = 2
if x == 2 && y == 3
  x = 3
if x == 3 && y == 2
  x = 2
  y = 2
if x != 3 && y != 3
  y = 4
if x != 3 && x != 3 && x != 4
  y = 3
if x != 3 && x != 3 && x != 4 && x == 3 && y == 2
  y = 5
else
  x = 3
x = 2  
while x == 2
  while x == 2      
    while x == 2
      while x == 2
        x = 1
        if x == 1
          x = 0
        x = x + 1
        if x == 4
          while x != 3
            x = x - 1
        else
          return 0
y = 4
callback = (arg0) ~
  return 0
x = (arg1) ~
  return arg1
x(callback)
if x == 3 && y == 2 && y != 3
  while x < 3
    if x != 2
      x = 4
y = 4
callback = (arg0) ~
  return 0
x = (arg1) ~
  return arg1
x(callback)
if x == 3 && y == 2 && y != 3
  while x < 3
    if x != 2
      x = 4
x = 2  
while x != 4
  while x == 2      
    while x == 2
      while x == 2
        x = 1
        if x == 1
          x = 0
        x = x + 1
        if x == 4
          while x != 3
            x = x - 1
        else
          return 0
x = 2  
while x == 2
  while x == 2      
    while x == 2
      while x == 2
        x = 1
        if x == 1
          x = 0
        x = x + 1
        if x == 4
          while x != 3
            x = x - 1
        else
          return 0
exampleFunction = (arg0, arg1) ~
  nestedExampleFunction = (arg0, arg1) ~
    x = x + 2
    y = x + 4
    z = arg0 - arg1
    a = x * y * arg0 * z
    exampleFunction1 = (arg0, arg1) ~
      nestedExampleFunction2 = (arg0, arg1) ~
        x = x + 2
        y = x + 4
        z = arg0 - arg1
        a = x * y * arg0 * z
        if x == 4
          x = 6
          while x < 10
            x = x + 2
        return a
      nestedExamplefunction2(2, 3)
    return a * exampleFunction1
  nestedExamplefunction(2, 3)
exampleFunction = (arg0, arg1) ~
  nestedExampleFunction = (arg0, arg1) ~
    x = x + 2
    y = x + 4
    z = arg0 - arg1
    a = x * y * arg0 * z
    exampleFunction1 = (arg0, arg1) ~
      nestedExampleFunction2 = (arg0, arg1) ~
        x = x + 2
        y = x + 4
        z = arg0 - arg1
        a = x * y * arg0 * z
        return a
      nestedExamplefunction2(2, 3)
    return a * exampleFunction1
  nestedExamplefunction(2, 3)
x = exampleFunction * 10e3 + 2
if x == 2
  exampleFunction = (arg0, arg1) ~
    nestedExampleFunction = (arg0, arg1) ~
      x = x + 2
      y = x + 4
      z = arg0 - arg1
      a = x * y * arg0 * z
      exampleFunction1 = (arg0, arg1) ~
        nestedExampleFunction2 = (arg0, arg1) ~
          x = x + 2
          y = x + 4
          z = arg0 - arg1
          a = x * y * arg0 * z
          return a
        nestedExamplefunction2(2, 3)
      return a * exampleFunction1
    nestedExamplefunction(2, 3)
  exampleFunction = (arg0, arg1) ~
    nestedExampleFunction = (arg0, arg1) ~
      x = x + 2
      y = x + 4
      z = arg0 - arg1
      a = x * y * arg0 * z
      exampleFunction1 = (arg0, arg1) ~
        nestedExampleFunction2 = (arg0, arg1) ~
          x = x + 2
          y = x + 4
          z = arg0 - arg1
          a = x * y * arg0 * z
          if a != 0 && x + 5 != 2 && x + 4 * z == 0
            return a
          exampleFunction = (arg0, arg1) ~
            nestedExampleFunction = (arg0, arg1) ~
              x = x + 2
              y = x + 4
              z = arg0 - arg1
              a = x * y * arg0 * z
              return a
            nestedExamplefunction(2, 3)
          return exampleFunction * 1 + 2 / 10 
        nestedExamplefunction2(2, 3)
      return a * exampleFunction1
    nestedExamplefunction(2, 3)
exampleFunction = (arg0, arg1) ~
  nestedExampleFunction = (arg0, arg1) ~
    x = x + 2
    y = x + 4
    z = arg0 - arg1
    a = x * y * arg0 * z
    exampleFunction1 = (arg0, arg1) ~
      nestedExampleFunction2 = (arg0, arg1) ~
        x = x + 2
        y = x + 4
        z = arg0 - arg1
        a = x * y * arg0 * z
        if a == 4
          return a
        if a + 2 == 4 && x < 10
          return a + b
        else if x == 2
          while x < 10
            while x < 8
              x = x + 1
          x = x + 1
        else
          return 0 + y * z
      nestedExamplefunction2(2, 3)
    return a * exampleFunction1
  nestedExamplefunction(2, 3)
exampleFunction = (arg0, arg1) ~
  nestedExampleFunction = (arg0, arg1) ~
    x = x + 2
    y = x + 4
    z = arg0 - arg1
    a = x * y * arg0 * z
    exampleFunction1 = (arg0, arg1) ~
      nestedExampleFunction2 = (arg0, arg1) ~
        x = x + 2
        y = x + 4
        z = arg0 - arg1
        a = x * y * arg0 * z
        return a
      nestedExamplefunction2(2, 3)
    return a * exampleFunction1
  nestedExamplefunction(2, 3)
x = exampleFunction * 10e3 + 2
if x == 2
  exampleFunction = (arg0, arg1) ~
    nestedExampleFunction = (arg0, arg1) ~
      x = x + 2
      y = x + 4
      z = arg0 - arg1
      a = x * y * arg0 * z
      exampleFunction1 = (arg0, arg1) ~
        nestedExampleFunction2 = (arg0, arg1) ~
          x = x + 2
          y = x + 4
          z = arg0 - arg1
          a = x * y * arg0 * z
          return a
        nestedExamplefunction2(2, 3)
      return a * exampleFunction1
    nestedExamplefunction(2, 3)
  exampleFunction = (arg0, arg1) ~
    nestedExampleFunction = (arg0, arg1) ~
      x = x + 2
      y = x + 4
      z = arg0 - arg1
      a = x * y * arg0 * z
      exampleFunction1 = (arg0, arg1) ~
        nestedExampleFunction2 = (arg0, arg1) ~
          x = x + 2
          y = x + 4
          z = arg0 - arg1
          a = x * y * arg0 * z
          return a
        nestedExamplefunction2(2, 3)
      return a * exampleFunction1
    nestedExamplefunction(2, 3)
exampleFunction = (arg0, arg1) ~
  nestedExampleFunction = (arg0, arg1) ~
    x = x + 2
    y = x + 4
    z = arg0 - arg1
    a = x * y * arg0 * z
    return a
  nestedExamplefunction(2, 3)
x = 0
if x == 0
  x = 4 - 3  + 4 * 2 * 10e22222
  log(x)
list = [4, 3, 2, 1, 0]
while x > 10
  for thisElement in list
    if thisElement == 3 && x == 4
      break
  x = x - 1
log(x)
log(x)

